{"version":3,"sources":["scripts/app.js"],"names":["angular","module","MainController","$timeout","SweetAlert","BoardsService","$localForage","vm","this","init","getBoards","then","result","boardList","createBoard","swal","title","type","showCancelButton","closeOnConfirm","animation","inputValue","console","log","showInputError","addBoard","close","setBoard","removeBoard","index","text","confirmButtonColor","confirmButtonText","cancelButtonText","closeOnCancel","isConfirm","$inject","controller","BoardController","$stateParams","ListService","createCardFlag","id","getBoard","board","getLists","boardId","lists","createList","addList","setList","name","createCard","itemIndex","closeCard","saveCards","event","item","itemIndesx","cardMoved","index1","splice","addCard","setCard","listIndex","desc","removeList","listId","removeCard","cardIndex","$q","deferred","defer","_this","getItem","forEach","setLists","resolve","promise","listObj","list","length","cards","push","setItem","getList","cardObj","card","listsObj","service","boards","setBoards","runBlock","$log","debug","run","routerConfig","$stateProvider","$urlRouterProvider","state","url","templateUrl","controllerAs","otherwise","config","$localForageProvider","version","storeName","$templateCache","put"],"mappings":"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","file":"scripts/app-955be55d04.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('dashboard', ['ngAnimate', 'ngAria', 'ui.router', 'toastr', 'oitozero.ngSweetAlert', 'LocalForageModule', 'dndLists']);\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('dashboard')\n    .controller('MainController', MainController);\n\n  /** @ngInject */\n  function MainController($timeout, SweetAlert, BoardsService, $localForage) {\n    var vm = this;\n\n    vm.init = function () {\n      BoardsService.getBoards().then(function (result) {\n        vm.boardList = result;\n      });\n    };\n\n    vm.init();\n\n\n    vm.createBoard = function () {\n      SweetAlert.swal({\n        title: \"Name your board!\",\n        type: 'input',\n        showCancelButton: true,\n        closeOnConfirm: false,\n        animation: \"slide-from-top\"\n      }, function(inputValue){\n        console.log(inputValue);\n        if (inputValue !== 'false' && inputValue !== false) {\n          if (inputValue === false) return false;\n\n          if (inputValue === \"\") {\n            swal.showInputError(\"You need to give a name to board!\");\n            return false\n          } else {\n            SweetAlert.swal(\"board created!\", \"\", \"success\");\n            vm.addBoard(inputValue);\n          }\n\n        } else {\n          SweetAlert.close();\n        }\n      });\n    };\n\n    vm.addBoard = function (inputValue) {\n      $timeout(function () {\n        SweetAlert.close();\n      }, 900);\n\n      BoardsService.setBoard(inputValue);\n      vm.init();\n      ;\n    };\n\n    vm.removeBoard = function (index) {\n      SweetAlert.swal({\n         title: \"Are you sure?\",\n         text: \"Your will not be able to recover this board\",\n         type: \"warning\",\n         showCancelButton: true,\n         confirmButtonColor: \"#DD6B55\",confirmButtonText: \"Yes, delete it!\",\n         cancelButtonText: \"No, cancel\",\n         closeOnConfirm: false,\n         closeOnCancel: false },\n      function(isConfirm){\n         if (isConfirm) {\n            SweetAlert.swal(\"Board is deleted!\", \"\", \"success\");\n            BoardsService.removeBoard(index);\n            vm.init();\n         } else {\n            SweetAlert.swal(\"\", \"Your board is safe :)\", \"error\");\n         }\n      });\n\n    };\n\n\n\n  }\n})();\n\n\n(function() {\n  'use strict';\n\n  angular\n    .module('dashboard')\n    .controller('BoardController', BoardController);\n\n  /** @ngInject */\n  function BoardController(BoardsService, $stateParams, ListService, SweetAlert, $timeout) {\n    var vm = this;\n    vm.createCardFlag = false;\n    vm.init = function () {\n      if ($stateParams.id) {\n        BoardsService.getBoard($stateParams.id).then(function (result) {\n          vm.board = result;\n        });\n\n        ListService.getLists({\n          boardId: $stateParams.id\n        }). then(function(lists) {\n          console.log(lists);\n          vm.lists = lists;\n        });\n\n      }\n    };\n\n    vm.createList = function () {\n      SweetAlert.swal({\n        title: \"Name your List!\",\n        type: 'input',\n        showCancelButton: true,\n        closeOnConfirm: false,\n        animation: \"slide-from-top\"\n      }, function(inputValue){\n        console.log(inputValue);\n        if (inputValue !== 'false' && inputValue !== false) {\n          if (inputValue === false) return false;\n\n          if (inputValue === \"\") {\n            swal.showInputError(\"You need to give a name to List!\");\n            return false\n          } else {\n            SweetAlert.swal(\"List created!\", \"\", \"success\");\n            vm.addList(inputValue);\n          }\n\n        } else {\n          SweetAlert.close();\n        }\n      });\n    };\n\n\n    vm.addList = function (inputValue) {\n      $timeout(function () {\n        SweetAlert.close();\n      }, 900);\n\n      ListService.setList({\n        name: inputValue,\n        boardId: $stateParams.id\n      });\n    };\n\n    vm.createCard = function (index) {\n      vm.createCardFlag = true;\n      vm.itemIndex = index;\n      ListService.getLists({\n        boardId: $stateParams.id\n      }). then(function(lists) {\n        console.log(lists);\n        vm.lists = lists;\n      });\n    };\n\n    vm.closeCard = function () {\n      vm.createCardFlag = false;\n    };\n\n    vm.saveCards = function (event, index, item, itemIndesx) {\n      console.log(event, item, index, itemIndesx);\n      $timeout(function () {\n        ListService.saveCards({\n          lists: vm.lists,\n          boardId: $stateParams.id\n        });\n      }, 100);\n\n      return item;\n    };\n\n    vm.cardMoved = function (index, index1) {\n      vm.lists[index1].splice(index, 1);\n      // console.log(index, index1);\n\n    };\n\n    vm.addCard = function (inputValue) {\n        vm.createCardFlag = false;\n        SweetAlert.swal(\"Card created!\", \"\", \"success\");\n      $timeout(function () {\n        SweetAlert.close();\n      }, 900);\n\n      ListService.setCard({\n        name: vm.name,\n        boardId: $stateParams.id,\n        listIndex: vm.itemIndex,\n        desc: vm.desc\n      });\n      ListService.getLists({\n        boardId: $stateParams.id\n      }). then(function(lists) {\n        console.log(lists);\n        vm.lists = lists;\n      });\n    };\n\n    vm.removeList = function (listId) {\n      SweetAlert.swal({\n         title: \"Are you sure?\",\n         text: \"Your will not be able to recover this list\",\n         type: \"warning\",\n         showCancelButton: true,\n         confirmButtonColor: \"#DD6B55\",confirmButtonText: \"Yes, delete it!\",\n         cancelButtonText: \"No, cancel\",\n         closeOnConfirm: false,\n         closeOnCancel: false },\n      function(isConfirm){\n         if (isConfirm) {\n            SweetAlert.swal(\"List is deleted!\", \"\", \"success\");\n            ListService.removeList({\n              boardId: $stateParams.id,\n              listIndex: listId\n            });\n         } else {\n            SweetAlert.swal(\"\", \"Your List is safe :)\", \"error\");\n         }\n      });\n    };\n\n    vm.removeCard = function (listId, index) {\n      SweetAlert.swal({\n         title: \"Are you sure?\",\n         text: \"Your will not be able to recover this card\",\n         type: \"warning\",\n         showCancelButton: true,\n         confirmButtonColor: \"#DD6B55\",confirmButtonText: \"Yes, delete it!\",\n         cancelButtonText: \"No, cancel\",\n         closeOnConfirm: false,\n         closeOnCancel: false },\n      function(isConfirm){\n         if (isConfirm) {\n            SweetAlert.swal(\"Card is deleted!\", \"\", \"success\");\n            ListService.removeCard({\n              boardId: $stateParams.id,\n              listIndex: listId,\n              cardIndex: index\n            });\n            ListService.getLists({\n              boardId: $stateParams.id\n            }). then(function(lists) {\n              console.log(lists);\n              vm.lists = lists;\n            });\n         } else {\n            SweetAlert.swal(\"\", \"Your card is safe :)\", \"error\");\n         }\n      });\n    };\n\n    vm.init();\n\n\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('dashboard')\n    .service('ListService', ListService);\n\n  /** @ngInject */\n  function ListService($localForage, $q) {\n    var lists = [];\n\n    var deferred = $q.defer();\n    var _this = this;\n    this.init = function () {\n      $localForage.getItem('lists').then(function (result) {\n        if (result) {\n          result.forEach(function (lists, index) {\n            _this.setLists({\n              boardId:  index,\n              lists: lists\n            });\n          });\n        }\n\n        deferred.resolve();\n      });\n      return deferred.promise;\n    };\n\n    this.init();\n\n    this.setList = function (listObj) {\n      if (!lists[listObj.boardId]) {\n        lists[listObj.boardId] = [];\n      }\n\n      var list = {\n        id: lists[listObj.boardId].length+1,\n        name: listObj.name,\n        cards: []\n      }\n\n      lists[listObj.boardId].push(list);\n      $localForage.setItem('lists', lists);\n    };\n\n    this.setLists = function (listObj) {\n      lists[listObj.boardId] = listObj.lists;\n    };\n\n\n    this.getLists = function (listObj) {\n      return this.init().then(function () {\n        return lists[listObj.boardId];\n      });\n    };\n\n    this.getList = function (listObj) {\n      return lists[listObj.boardId];\n    };\n\n    this.setCard = function (cardObj) {\n\n      var card = {\n        name: cardObj.name,\n        desc: cardObj.desc\n      };\n      console.log(lists[cardObj.boardId]);\n      lists[cardObj.boardId][cardObj.listIndex].cards.push(card);\n      $localForage.setItem('lists', lists);\n    };\n\n    this.removeList = function (cardObj) {\n      lists[cardObj.boardId].splice(cardObj.listIndex, 1);\n      $localForage.setItem('lists', lists);\n    };\n\n    this.removeCard = function (cardObj) {\n      lists[cardObj.boardId][cardObj.listIndex].cards.splice(cardObj.cardIndex, 1);\n      $localForage.setItem('lists', lists);\n    };\n\n    this.saveCards = function (listsObj) {\n      lists[listsObj.boardId] = listsObj.lists;\n      $localForage.setItem('lists', lists);\n    };\n\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('dashboard')\n    .service('BoardsService', BoardsService);\n\n  /** @ngInject */\n  function BoardsService($localForage, $q) {\n    var boards = [];\n    var deferred = $q.defer();\n    var _this = this;\n    this.init = function () {\n      $localForage.getItem('boards').then(function (result) {\n        if (result) {\n          _this.setBoards(result);\n        }\n        deferred.resolve();\n      });\n      return deferred.promise;\n    };\n\n    this.init();\n\n    this.setBoard = function (name) {\n      var board = {\n        id: boards.length+1,\n        name: name\n      }\n\n      boards.push(board);\n      $localForage.setItem('boards', boards);\n    };\n\n    this.setBoards = function (boardList) {\n      boards = boardList;\n    };\n\n\n    this.getBoards = function () {\n      return this.init().then(function () {\n        return boards;\n      });\n    };\n\n    this.getBoard = function (index) {\n      return this.init().then(function () {\n        return boards[index];\n      });\n    };\n\n\n    this.removeBoard = function (index) {\n      boards.splice(index, 1);\n      $localForage.setItem('boards', boards);\n    };\n\n\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('dashboard')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('dashboard')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('home', {\n        url: '/',\n        templateUrl: 'app/main/main.html',\n        controller: 'MainController',\n        controllerAs: 'vm'\n      })\n      .state('board', {\n        url: '/board/:id',\n        templateUrl: 'app/board/board.html',\n        controller: 'BoardController',\n        controllerAs: 'vm'\n      });\n\n    $urlRouterProvider.otherwise('/');\n  }\n\n})();\n\n/* global malarkey:false, moment:false */\n(function() {\n  'use strict';\n\n  // angular\n  //   .module('dashboard')\n  //   .constant('malarkey', malarkey)\n  //   .constant('moment', moment);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('dashboard')\n    .config(config);\n\n  /** @ngInject */\n  function config($localForageProvider) {\n    // Enable log\n\n    $localForageProvider.config({\n      name        : 'boards', // name of the database and prefix for your data, it is \"lf\" by default\n      version     : 1.0, // version of the database, you shouldn't have to use this\n      storeName   : 'toDo' // name of the table\n    });\n\n  }\n\n})();\n\nangular.module(\"dashboard\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/board/board.html\",\"<div class=\\\"container h100\\\"><div class=cardList><h1 class=boardList__header><a href=#/ class=icon-home></a>{{vm.board.name}}<a href=javascript:; class=icon-plus ng-click=vm.createList()>Create new list</a></h1><div class=text-center ng-if=!vm.lists.length><p>You have not created any boards yet!</p></div><ul class=\\\"unstyled cardList__list\\\"><li class=listItem ng-repeat=\\\"list in vm.lists track by $index\\\"><span class=list__title href=# ui-sref=\\\"board({id: $index})\\\">{{list.name}}</span> <a class=\\\"icon-trash-empty cardList__remove\\\" ng-click=vm.removeList($index)></a> <a class=\\\"icon-plus cardList__add\\\" ng-click=vm.createCard($index)></a><ul class=noMargin dnd-list=list.cards dnd-inserted=\\\"vm.saveCards(event, index, item, $index)\\\"><li class=cards dnd-draggable=card dnd-moved=\\\"list.cards.splice($index, 1)\\\" ng-repeat=\\\"card in list.cards track by $index\\\"><a class=\\\"icon-trash-empty card__remove cardList__remove\\\" ng-click=\\\"vm.removeCard($parent.$index, $index)\\\"></a> <span class=boardList__link href=# ui-sref=\\\"board({id: $index})\\\">{{card.name}}</span> <span class=card__desc>{{card.desc}}</span></li></ul></li></ul></div><div class=createCard ng-if=vm.createCardFlag><div class=vAlign><a href=javascript:; class=\\\"icon-cancel-circled cardList__remove\\\" ng-click=vm.closeCard()></a><form name=createCard class=createCard__form ng-submit=vm.addCard(createCard.$valid) novalidate><!-- NAME --><div class=form-group><label>Name of the card</label><input type=text name=name class=form-control ng-model=vm.name required></div><div class=form-group><label>Description</label><textarea type=text name=username class=form-control ng-model=vm.desc></textarea></div><!-- SUBMIT BUTTON --> <button type=submit class=\\\"button button-primary float-right\\\">Submit</button> <button class=\\\"button button-outline float-right\\\" ng-click=vm.closeCard()>cancel</button></form></div></div></div>\");\n$templateCache.put(\"app/main/main.html\",\"<div class=container><div class=boardList><h1 class=boardList__header>My boards <a href=# class=\\\"icon-plus float-right\\\" ng-click=vm.createBoard()>Create new board</a></h1><ul class=unstyled><li ng-repeat=\\\"board in vm.boardList track by $index\\\"><a class=boardList__link href=# ui-sref=\\\"board({id: $index})\\\">{{board.name}}</a> <a class=\\\"icon-minus-circled boardList__options\\\" ng-click=vm.removeBoard($index)></a></li></ul><div class=text-center ng-if=!vm.boardList.length><p>You have not created any boards yet!</p></div></div></div>\");}]);"],"sourceRoot":"/source/"}